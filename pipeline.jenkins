@Library('POC-ML-SHARED-LIBRARIES')_

pipeline {
    agent { label 'master'}
        stages {
            stage('Checkout'){
                steps{
                    withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId:'github',
                  usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD']
                    ]){
                        sh "git clone --branch master https://github.com/hgarciao/POC-ML-PROJECT.git"
                    }
                }
            }
            
            
            stage('Generate Pipeline 1') {
                steps {
                    script{
                        
                        ntbfile = readJSON file: "./ntbs/POC_COMPLETO.ipynb"
                        
                        def taggedCells = ntbfile.cells.findAll(){it.metadata.tags}
                        def importCell = taggedCells.findAll(){it.metadata.tags.contains('imports')}
                        def resultCell = taggedCells.findAll(){it.metadata.tags.contains('results')}
                        def pipelineCells = taggedCells.findAll(){!it.metadata.tags.contains('imports') && !it.metadata.tags.contains('results') }
                        
                        
                        
                        podTemplate(label: 'pythonpod', containers: [
                            containerTemplate(name: 'python', image: 'python', ttyEnabled: true, command: 'cat')
                          ]
                          ) {
                            node('pythonpod') {
                                stage('test'){
                                   container('python') {
                                        sh "pip install pipreqs"
                                        sh "mkdir pythonfiles"
                                        sh "echo \"${importCell.source.get(0)}\" > pythonfiles/imports.py"
                                        sh "pipreqs pythonfiles/."
                                        sh "ls"
                                   }
                                }
                            }
                          }
                        }
                    }
                    
                }
            }
        post {
            always {
              deleteDir()
            }
        }
    }
