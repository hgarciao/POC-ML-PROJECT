pipeline {
    agent { label 'master'}
        stages {
            stage('Generate Pipeline 1') {
                steps {
                    script{
                        
                        ntbfile = readJSON file: "./ntbs/POC_COMPLETO.ipynb"
                        
                        def taggedCells = ntbfile.cells.findAll(){it.metadata.tags}
                        def importCell = taggedCells.findAll(){it.metadata.tags.contains('imports')}
                        def imports = ''
                        importCell.source.get(0).each{
                            imports = imports + it
                        }
                        def resultCell = taggedCells.findAll(){it.metadata.tags.contains('results')}
                        def pipelineCells = taggedCells.findAll(){!it.metadata.tags.contains('imports') && !it.metadata.tags.contains('results') }
                        
                        
                        
                        podTemplate(label: 'pythonpod', containers: [
                            containerTemplate(name: 'python', image: 'python', ttyEnabled: true, command: 'cat')
                          ]
                          ) {
                            node('pythonpod') {
                                stage('Checkout'){
                                        withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId:'github',
                                      usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD']
                                        ]){
                                            sh "git clone --branch master https://github.com/hgarciao/POC-ML-PROJECT.git"
                                        }
                                }
                                stage('Installing Dependencies'){
                                   container('python') {
                                        sh "pip install pipreqs dill"
                                        sh "mkdir pythonfiles"
                                        sh "echo \"${imports}\" > pythonfiles/imports.py"
                                        sh "pipreqs pythonfiles"
                                        sh "cat pythonfiles/requirements.txt"
                                        sh "python -m pip install -r  pythonfiles/requirements.txt"
                                   }
                                }
                                
                                def inputcont=0
                                def preproccont=0
                                def trainningcont=0
                                def testpreproccont=0
                                def testtrainningcont=0
                                
                                imports = imports + '\nimport dill'
                                
                                def savesessioncode= '''
filename = 'globalsave.pkl'
dill.dump_session(filename)
                                '''
                                def restoresessioncode='''
try:
    filename='globalsave.pkl'
    dill.load_session(filename)
except:
    print('primera vez')
                                '''
                                
                                
                                pipelineCells.each{
                                    if(it.metadata.tags.contains('parameters')){
                                        inputcont = inputcont + 1
                                        def props = readProperties text: "${it.source.get(0)}"
                                        stage("User Input ${inputcont}"){
                                            container('python') {
                                               def userInput
                                               def newvariables = ''
                                               props.keySet().each{
                                                  userInput = input(
                                                    id: 'Proceed1',message: "Ingrese ${it}", parameters: [
                                                    [$class: 'TextParameterDefinition', defaultValue: "${props.get(it).replaceAll("\"","")}", description: '',name:'']
                                                    ])
                                                    
                                                    if(props.get(it).contains('"')){
                                                         userInput = "\"${userInput}\""
                                                    }
                                                    
                                                    newvariables = newvariables + "\n${it} = ${userInput}"
                                               }
                                               
                                              newvariables = "${imports}\n${restoresessioncode}\n${newvariables}\n${savesessioncode}"
                                              
                                              writeFile(file: "newvariables.py", text: "${newvariables}")
                                              sh "cat newvariables.py"
                                              sh "python newvariables.py"
                                            }
                                        }
                                    }
                                    else if(it.metadata.tags.contains('preproc')){
                                        if(it.metadata.tags.contains('test')){
                                           testpreproccont = testpreproccont + 1 
                                            stage("${it.metadata.tags.get(2)}"){
                                                container('python') {
                                                    def code = ""
                                                    it.source.each{
                                                        code = code + "\n${it.toString()}"
                                                    }
                                                    
                                                    code = "${imports}\n${restoresessioncode}\n${code}\n${savesessioncode}"
                                              
                                                  writeFile(file: "${it.metadata.tags.get(2)}.py", text: "${code}")
                                                  sh "cat ${it.metadata.tags.get(2)}.py"
                                                  sh "python ${it.metadata.tags.get(2)}.py"
                                                }
                                            }
                                        }
                                        else{
                                            preproccont = preproccont + 1
                                            stage("${it.metadata.tags.get(1)}"){
                                               container('python') {
                                                    def code = ""
                                                    it.source.each{
                                                        code = code + "\n${it.toString()}"
                                                    }
                                                    
                                                    code = "${imports}\n${restoresessioncode}\n${code}\n${savesessioncode}"
                                              
                                                  writeFile(file: "${it.metadata.tags.get(1)}.py", text: "${code}")
                                                  sh "cat ${it.metadata.tags.get(1)}.py"
                                                  sh "python ${it.metadata.tags.get(1)}.py"
                                                }
                                            }
                                        }
                                    }
                                    else if(it.metadata.tags.contains('trainning')){
                                        if(it.metadata.tags.contains('test')){
                                            testtrainningcont = testtrainningcont + 1
                                            stage("${it.metadata.tags.get(2)}"){
                                               container('python') {
                                                    def code = ""
                                                    it.source.each{
                                                        code = code + "\n${it.toString()}"
                                                    }
                                                    
                                                    code = "${imports}\n${restoresessioncode}\n${code}\n${savesessioncode}"
                                              
                                                  writeFile(file: "${it.metadata.tags.get(2)}.py", text: "${code}")
                                                  sh "cat ${it.metadata.tags.get(2)}.py"
                                                  sh "python ${it.metadata.tags.get(2)}.py"
                                                }
                                            }
                                        }
                                        else{
                                            trainningcont = trainningcont + 1
                                            stage("${it.metadata.tags.get(1)}"){
                                                container('python') {
                                                    def code = ""
                                                    it.source.each{
                                                        code = code + "\n${it.toString()}"
                                                    }
                                                    
                                                    code = "${imports}\n${restoresessioncode}\n${code}\n${savesessioncode}"
                                              
                                                  writeFile(file: "${it.metadata.tags.get(1)}.py", text: "${code}")
                                                  sh "cat ${it.metadata.tags.get(1)}.py"
                                                  sh "python ${it.metadata.tags.get(1)}.py"
                                                }
                                            }
                                        }
                                    }
                                }
                                
                            }
                          }
                        }
                    }
                    
                }
            }
        post {
            always {
              deleteDir()
            }
        }
    }
